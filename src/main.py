import argparse

from src.user.storage import (
    delete_user_by_name,
    export_users_to_csv,
    find_users_by_name,
    load_users,
    save_user,
)
from src.user.utils import collect_user_profile

DATA_FILE = 'data/profiles.json'


def handle_create():
    user = collect_user_profile()
    save_user(user, DATA_FILE)


def handle_list():
    users = load_users(DATA_FILE)
    if not users:
        print("üôÅ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    print(f"\nüìã –í –±–∞–∑–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user in users:
        print(f"‚Äî {user.name}, {user.age} –ª–µ—Ç, —Ä–æ—Å—Ç {user.height} —Å–º")


def handle_filter(query: str):
    if not query:
        print("‚ùó –£–∫–∞–∂–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ --query")
        return
    results = find_users_by_name(query, DATA_FILE)
    if not results:
        print("üôÅ –ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)}:")
    for user in results:
        print(f"‚Äî {user.name}, {user.age} –ª–µ—Ç")


def handle_delete(name: str) -> None:
    if not name:
        print("‚ùó –£–∫–∞–∂–∏ –∏–º—è —á–µ—Ä–µ–∑ --name")
        return
    deleted = delete_user_by_name(name, DATA_FILE)
    if deleted:
        print(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{name}' —É–¥–∞–ª—ë–Ω.")
    else:
        print(f"üôÅ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    

def handle_export(out: str) -> None:
    if not out:
        print("‚ùó –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ CSV —á–µ—Ä–µ–∑ --out")
        return
    export_users_to_csv(DATA_FILE, out)
    print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {out}")


def parse_args(args):
    match args.command:
        case "create":
            handle_create()
        case "list":
            handle_list()
        case "filter":
            handle_filter(args.query)
        case "delete":
            handle_delete(args.name)
        case "export":
            handle_export(args.out)
    
    
def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    parser.add_argument(
        "command", 
        choices=["create", "list", 'filter', 'delete', 'export'],
        help="–ö–æ–º–∞–Ω–¥–∞: create –∏–ª–∏ list"
    )
    parser.add_argument("--query", help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è filter)")
    parser.add_argument("--name", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è)")
    parser.add_argument("--out", help="–ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É (–¥–ª—è export)")
    
    args = parser.parse_args()
    
    parse_args(args)
    

if __name__ == "__main__":
    main()