import argparse

from src.user.storage import load_users, save_user
from src.user.utils import collect_user_profile

DATA_FILE = 'data/profiles.json'


def handle_create():
    user = collect_user_profile()
    save_user(user, DATA_FILE)


def handle_list():
    users = load_users(DATA_FILE)
    if not users:
        print("üôÅ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    print(f"\nüìã –í –±–∞–∑–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for user in users:
        print(f"‚Äî {user.name}, {user.age} –ª–µ—Ç, —Ä–æ—Å—Ç {user.height} —Å–º")


def main():
    parser = argparse.ArgumentParser(
        description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    parser.add_argument(
        "command", choices=["create", "list"], help="–ö–æ–º–∞–Ω–¥–∞: create –∏–ª–∏ list"
    )
    args = parser.parse_args()
    
    match args.command:
        case 'create':
            handle_create()
        case 'list':
            handle_list()
                
                
if __name__ == "__main__":
    main()